name: Build native image
on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'
      - 'v*.*.*'
      - '*.*.*-*'
      - 'v*.*.*-*'
  pull_request:
    paths:
      - .github/**
      - src/**
      - cmd/**
      - project.clj
      - Makefile
      - VALD_CLIENT_CLJ_VERSION

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 20.2.0
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          gu install native-image
          curl -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod a+x lein
          sudo ./lein version
          sudo apt-get update && sudo apt-get install -y upx
      - name: Build native-image
        run: |
          make valdcli
          # upx --lzma --best valdcli
          chmod a+x valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-linux
          path: ./valdcli
  build-linux-static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 20.2.0
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          gu install native-image
          curl -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod a+x lein
          sudo ./lein version
          sudo apt-get update && sudo apt-get install -y upx
      - name: Fetch bundle
        run: |
          curl -L -o musl.tar.gz https://github.com/gradinac/musl-bundle-example/releases/download/v1.0/musl.tar.gz
          tar xvzf musl.tar.gz
          mv bundle /tmp/musl
      - name: Build musl-gcc
        run: |
          curl -o musl-${MUSL_VERSION}.tar.gz https://musl.libc.org/releases/musl-${MUSL_VERSION}.tar.gz
          tar xzvf musl-${MUSL_VERSION}.tar.gz
          cd musl-${MUSL_VERSION}
          ./configure --disable-shared --prefix=/tmp/musl
          make
          make install
          export PATH=$PATH:/tmp/musl/bin
          echo "::set-env name=PATH::/tmp/musl/bin:$PATH"
        env:
          MUSL_VERSION: 1.2.1
      - name: Build static native-image
        run: |
          make OPTS="--static --libc=musl" valdcli
          # upx --lzma --best valdcli
          chmod a+x valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-linux-static
          path: ./valdcli
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm/Contents/Home
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-darwin-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 20.2.0
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          brew install leiningen
          gu install native-image
          brew install upx
      - name: Build native-image
        run: |
          make valdcli
          # upx --lzma --best valdcli
          chmod a+x valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-macos
          path: ./valdcli
  docker-build:
    runs-on: ubuntu-latest
    needs:
      - build-linux-static
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: valdcli-linux-static
      - name: Build the Docker image
        run: |
          mv valdcli-linux-static/valdcli ./
          chmod a+x valdcli
          docker build -t vdaas/valdcli .
      - name: login to DockerHub
        run: |
          echo ${DOCKERHUB_PASS} | docker login --username ${DOCKERHUB_USER} --password-stdin
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
      - name: push to DockerHub (master)
        if: github.ref == 'refs/heads/master'
        run: |
          imagename="vdaas/valdcli"
          docker tag ${imagename} ${imagename}:nightly
          docker push ${imagename}:nightly
      - name: push to DockerHub (pull request)
        if: github.event_name == 'pull_request'
        run: |
          imagename="vdaas/valdcli"
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          docker tag ${imagename} ${imagename}:pr-${pr_num}
          docker push ${imagename}:pr-${pr_num}
      - name: push to DockerHub (tags)
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          imagename="vdaas/valdcli"
          tag_name=`echo $GITHUB_REF | sed -e 's:^refs/tags/::'`
          docker tag ${imagename} ${imagename}:${tag_name}
          docker push ${imagename}:${tag_name}
  release:
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-linux-static
      - build-macos
    steps:
      - uses: actions/checkout@v1
      - name: Create release
        if: startsWith( github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: mkdir
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          mkdir -p tmp/linux
          mkdir -p tmp/linux-static
          mkdir -p tmp/macos
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-linux
          path: tmp/linux
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-linux-static
          path: tmp/linux-static
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-macos
          path: tmp/macos
      - name: zip
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          chmod a+x tmp/linux/valdcli
          chmod a+x tmp/linux-static/valdcli
          chmod a+x tmp/macos/valdcli
          zip --junk-paths valdcli-linux tmp/linux/valdcli
          zip --junk-paths valdcli-linux-static tmp/linux-static/valdcli
          zip --junk-paths valdcli-macos tmp/macos/valdcli
      - name: Upload Release Asset (linux)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-linux.zip
          asset_name: valdcli-linux.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (linux-static)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-linux-static.zip
          asset_name: valdcli-linux-static.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (macos)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-macos.zip
          asset_name: valdcli-macos.zip
          asset_content_type: application/zip
