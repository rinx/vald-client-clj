name: Build native image
on:
  push:
    branches:
      - master
    tags:
      - '*.*.*'
      - 'v*.*.*'
      - '*.*.*-*'
      - 'v*.*.*-*'
  pull_request:
    paths:
      - .github/**
      - src/**
      - cmd/**
      - project.clj

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 19.3.1
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          gu install native-image
          curl -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod a+x lein
          sudo apt-get update && sudo apt-get install -y upx
      - name: Build native-image
        run: |
          ./lein with-profile +cmd native-image
          # upx --lzma --best target/valdcli
          chmod a+x target/valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-linux
          path: ./target/valdcli
  build-linux-static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-linux-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 19.3.1
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          gu install native-image
          curl -o lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
          chmod a+x lein
          sudo apt-get update && sudo apt-get install -y upx
      - name: Build static native-image
        run: |
          ./lein with-profile +static native-image
          upx --lzma --best target/valdcli
          chmod a+x target/valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-linux-static
          path: ./target/valdcli
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Install GraalVM
        run: |
          TMP_GRAALVM_HOME=/tmp/graalvm
          GRAALVM_HOME=/tmp/graalvm/Contents/Home
          GRAALVM_TGZ_URI="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${GRAALVM_VERSION}/graalvm-ce-${JAVA_VERSION}-darwin-amd64-${GRAALVM_VERSION}.tar.gz"
          curl -sL $GRAALVM_TGZ_URI --output graalvm.tar.gz
          mkdir -p $TMP_GRAALVM_HOME
          tar -xf graalvm.tar.gz -C $TMP_GRAALVM_HOME --strip-components=1
          chmod -R a+rwx $TMP_GRAALVM_HOME
          echo "::set-env name=PATH::$GRAALVM_HOME/bin:$PATH"
          echo "::set-env name=GRAALVM_HOME::$GRAALVM_HOME"
          echo "::set-env name=JAVA_HOME::$GRAALVM_HOME"
        env:
          GRAALVM_VERSION: 19.3.1
          JAVA_VERSION: java11
      - name: Install dependencies
        run: |
          brew install leiningen
          gu install native-image
          brew install upx
      - name: Build native-image
        run: |
          lein with-profile +cmd native-image
          upx --lzma --best target/valdcli
          chmod a+x target/valdcli
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: valdcli-macos
          path: ./target/valdcli
  docker-build:
    runs-on: ubuntu-latest
    needs:
      - build-linux-static
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: valdcli-linux-static
      - name: Build the Docker image
        run: |
          mv valdcli-linux-static/valdcli ./
          chmod a+x valdcli
          docker build -t rinx/valdcli .
      - name: login to DockerHub
        run: |
          echo ${DOCKERHUB_PASS} | docker login --username ${DOCKERHUB_USER} --password-stdin
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
      - name: push to DockerHub (master)
        if: github.ref == 'refs/heads/master'
        run: |
          imagename="rinx/valdcli"
          docker tag ${imagename} ${imagename}:nightly
          docker push ${imagename}:nightly
      - name: push to DockerHub (pull request)
        if: github.event_name == 'pull_request'
        run: |
          imagename="rinx/valdcli"
          pr_num=`cat $GITHUB_EVENT_PATH | jq -r ".number"`
          docker tag ${imagename} ${imagename}:pr-${pr_num}
          docker push ${imagename}:pr-${pr_num}
      - name: push to DockerHub (tags)
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          imagename="rinx/valdcli"
          tag_name=`echo $GITHUB_REF | sed -e 's:^refs/tags/::'`
          docker tag ${imagename} ${imagename}:${tag_name}
          docker push ${imagename}:${tag_name}
  release:
    runs-on: ubuntu-latest
    needs:
      - build-linux
      - build-linux-static
      - build-macos
    steps:
      - uses: actions/checkout@v1
      - name: Create release
        if: startsWith( github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: mkdir
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          mkdir -p tmp/linux
          mkdir -p tmp/linux-static
          mkdir -p tmp/macos
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-linux
          path: tmp/linux
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-linux-static
          path: tmp/linux-static
      - uses: actions/download-artifact@v1
        if: startsWith( github.ref, 'refs/tags/')
        with:
          name: valdcli-macos
          path: tmp/macos
      - name: zip
        if: startsWith( github.ref, 'refs/tags/')
        run: |
          chmod a+x tmp/linux/valdcli
          chmod a+x tmp/linux-static/valdcli
          chmod a+x tmp/macos/valdcli
          zip --junk-paths valdcli-linux tmp/linux/valdcli
          zip --junk-paths valdcli-linux-static tmp/linux-static/valdcli
          zip --junk-paths valdcli-macos tmp/macos/valdcli
      - name: Upload Release Asset (linux)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-linux.zip
          asset_name: valdcli-linux.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (linux-static)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-linux-static.zip
          asset_name: valdcli-linux-static.zip
          asset_content_type: application/zip
      - name: Upload Release Asset (macos)
        if: startsWith( github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./valdcli-macos.zip
          asset_name: valdcli-macos.zip
          asset_content_type: application/zip
  e2e:
    runs-on: ubuntu-latest
    needs:
      - build-linux-static
    steps:
      - uses: engineerd/setup-kind@v0.2.0
        with:
          skipClusterCreation: true
      - uses: azure/setup-helm@v1
        with:
          version: 'v3.1.0'
      - name: Helm version
        run: |
          helm version
      - uses: actions/checkout@v1
      - name: get valdcli
        uses: actions/download-artifact@v1
        with:
          name: valdcli-linux-static
      - run: |
          mv valdcli-linux-static/valdcli ./
          chmod a+x valdcli
      - name: start kind
        run: |
          kind create cluster --name vald
          kubectl cluster-info
      - name: deploy vald
        run: |
          sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld
          kubectl apply -f .github/assets/k8s/mysql
          kubectl apply -f .github/assets/k8s/redis
          until [ $(kubectl get pods | grep Running | wc -l) -ge 2 ]
          do
            echo "wait for ready"
            kubectl get pods
            sleep 2
          done
          helm repo add vald https://vald.vdaas.org/charts
          helm install \
            --set gateway.minReplicas=1 \
            --set gateway.hpa.enabled=false \
            --set gateway.gateway_config.index_replica=3 \
            --set agent.minReplicas=3 \
            --set agent.hpa.enabled=false \
            --set agent.ngt.auto_index_check_duration=30s \
            --set agent.ngt.auto_index_length=20 \
            --set agent.ngt.dimension=6 \
            --set discoverer.minReplicas=1 \
            --set discoverer.hpa.enabled=false \
            --set compressor.minReplicas=1 \
            --set compressor.hpa.enabled=false \
            --set compressor.compress.compress_algorithm=gob \
            --set backupManager.minReplicas=1 \
            --set backupManager.hpa.enabled=false \
            --set indexManager.minReplicas=1 \
            --set indexManager.hpa.enabled=false \
            --set meta.minReplicas=1 \
            --set meta.hpa.enabled=false \
            --set initializer.mysql.enabled=true \
            --set initializer.redis.enabled=true \
            --generate-name vald/vald
          until [ $(kubectl get pods | grep Running | wc -l) -ge 10 ]
          do
            echo "wait for ready"
            kubectl get pods
            sleep 2
          done
          kubectl get pods
      - name: insert
        run: |
          kubectl port-forward deployment/vald-gateway 8081:8081 &
          pid=$!
          set +x
          sleep 10
          ./valdcli rand-vec -d 6 | ./valdcli -p 8081 insert abc
          ./valdcli -p 8081 stream-insert << EOF
          [{:vector [0.4554944575653239 0.17698450824379797 0.14510892025549904 0.45742806648293266 0.8255640513082158 0.6104319034657276], :id "d923e43c-7bdc-40fd-9a95-26e54edc54a5"}
          {:vector [0.9659463766247516 0.7129174248792229 0.3345289671984051 0.5325195679844225 0.5589141699199695 0.20497376669300038], :id "75666cc5-c5e8-4ba6-a653-7f4f216e2710"}]
          EOF
          sleep 10
          for i in `seq 1 30`
          do
            ./valdcli rand-vec -d 6 | ./valdcli -p 8081 insert "v${i}"
            sleep 1
          done
          sleep 120
          ./valdcli -p 8081 exists abc
          ./valdcli -p 8081 get-object abc
          ./valdcli -p 8081 stream-get-object '["abc" "d923e43c-7bdc-40fd-9a95-26e54edc54a5" "75666cc5-c5e8-4ba6-a653-7f4f216e2710"]'
          ./valdcli -p 8081 search '[0.3 0.3 0.3 0.3 0.3 0.3]'
          ./valdcli -p 8081 stream-search '[[0.3 0.1 0.7 0.3 0.5 0.5] [0.3 0.3 0.4 0.3 0.4 0.4] [0.6 0.1 0.5 0.3 0.4 0.4]]'
          ./valdcli -p 8081 search-by-id abc
          ./valdcli -p 8081 stream-search-by-id '["abc" "d923e43c-7bdc-40fd-9a95-26e54edc54a5" "75666cc5-c5e8-4ba6-a653-7f4f216e2710"]'
          kill $pid
